from portion import closed
from random import randint
import unittest
class algorytm:
    def divide_in(self, int1, int2):
        return int1 | int2
    def divide_half_out(self, int1, int2):
        up, low = (int1.upper, int2.upper), (int1.lower, int2.lower)
        if int2.lower==int1.lower:
            return closed(min(low), min(up)), closed(min(up), max(up))
        else:
            return closed(min(low), max(low)), closed(max(low), max(up))
    def divide_out(self, int1, int2):
        inter = int1 & int2
        return int1 - (inter), inter ,int2 - (inter)
    def is_in(self, interval1, interval2):
        return True if interval1 & interval2 else False
    def is_equal(self, interval1, interval2):
        return True if interval1==interval2 else False
    def is_out(self, interval1, interval2):
        return True if (interval1 & interval2)!=(interval1|interval2) and any(interval1&interval2)  else False
    def merge(self, int1, box_x, box_y):
        all = [int1.upper, box_x.upper, box_y.upper, int1.lower, box_x.lower, box_y.lower]
        all.sort()
        one, two, thr = closed(all[0], all[1]), closed(all[2], all[3]), closed(all[4], all[5])
        return one, two - one | thr, thr - two
    def is_separate(self, int1, int2):
        return False if any(int1 & int2) else True


class testin(unittest.TestCase):
    def test_funkcji_half_out(self, dat):
        algorithm = algorytm()
        data_check_1, data_check_2 = algorithm.divide_half_out(closed(dat[0], dat[1]), closed(dat[2], dat[3]))
        dat.sort()
        if(dat[0]==dat[1]):
            return self.assertEqual((data_check_1 | data_check_2), closed(dat[0], dat[2]) | closed(dat[2], dat[3]))
        else:
            return self.assertEqual((data_check_1 | data_check_2), closed(dat[0], dat[1])| closed(dat[1], dat[3]))
    def test_funkcji_in(self, int1, int2):
        return self.assertEqual((algorytm().divide_in(int1, int2)), int1|int2)
    def test_funkcji_out(self, dat):
        int1, int2 = closed(dat[0], dat[1]), closed(dat[2], dat[3])
        inter = int1 & int2
        dat.sort()
        return self.assertEqual(algorytm().divide_out(int1, int2), (int1 - inter, inter,int2 - inter))
    def test_funkcji_is_in(self, dat):
        int1, int2 = closed(dat[0], dat[1]), closed(dat[2], dat[3])
        return self.assertEqual(algorytm().is_in(int1, int2),  (int1 & int2) == min(int2, int1))
    def test_funkcji_is_out(self,dat):
        int1, int2 = closed(dat[0], dat[1]), closed(dat[2], dat[3])
        return self.assertEqual(algorytm().is_out(int1, int2),  any(int1 & int2))
    def test_funkcji_is_equal(self, dat):
        int1, int2 = closed(dat[0], dat[1]), closed(dat[2], dat[3])
        return self.assertEqual(algorytm().is_equal(int1, int2),  (int1 & int2) == (int1 | int2) )
    def test_funkcji_is_separate(self, dat):
        int1, int2 = closed(dat[0], dat[1]), closed(dat[2],dat[3])
        return self.assertEqual(algorytm().is_separate(int1, int2), not any(int1 & int2))
sprawdz = testin()
print(sprawdz.test_funkcji_half_out([1, 10, 5, 10]))
print(sprawdz.test_funkcji_half_out([12, 100, 12, 40]))

print(sprawdz.test_funkcji_in(closed(1, 20), closed(3, 5)))
print(sprawdz.test_funkcji_out([1, 10, 12, 20]))
print(sprawdz.test_funkcji_is_in([1, 10, 2, 5]))
print(sprawdz.test_funkcji_is_out([1, 10, 9, 16]))
print(sprawdz.test_funkcji_is_equal([1, 10, 1, 10]))
print(sprawdz.test_funkcji_is_separate([1, 10, 20, 30]))
